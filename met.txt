







Основы веб разработки

Лабораторная работа №1
Разработка API для управления мероприятиями
 
Цель работы
Освоить базовые принципы создания сервера на Node.js с Express, работы с базой данных PostgreSQL и построения REST API.

Критерии выполнения
1. API должен поддерживать следующие операции:
●	Создание нового мероприятия (POST /events)
●	Получение списка мероприятий (GET /events)
●	Получение конкретного мероприятия по ID (GET /events/:id)
●	Обновление данных мероприятия (PUT /events/:id)
●	Удаление мероприятия (DELETE /events/:id)
●	Создание нового пользователя (POST /users)
●	Получение списка пользователей(GET /users)
2. Должны быть выполнены все 4 дополнительных задания в соответствии с вариантом. Для каждого варианта должно быть реализовано по 1 заданию из каждого раздела (Задания из разделов Документация и Логирование выполняются всеми вариантами).
3. Работа с репозиторием:
1.	Создать отдельный монорепозиторий (бекенд и фронтенд будет в одном репозитории) под разработку проекта в рамках лабораторной работы
2.	Создать папку backend в репозитории – корневую для бекенд части проекта
3.	Работа над лабораторной должна вестись в отдельной ветке ответвлений от основной (master/main). 
4.	В рамках лабораторной работы необходимо сделать минимум 3 коммита:
4.1.	Инициализирующий коммит (создан репозиторий с папкой backend и файлом Readme содержащим как минимум ФИО и номер группы)
4.2.	Коммит после выполнения основного задания
4.3.	Коммит после выполнения дополнительных заданий по варианту
5.	Коммиты должны быть оформлены в соответствии с требованиями прошлого семестра Лабораторная работа №4
6.	Должен быть оформлен Merge Request ветки лабораторной работы в главную ветку. Должно быть указано описание что было сделано, какие здания реализовывались по варианту. Мерж ревест можно смержить сразу, главное без сквоша коммитов и удаления ветки.
7.	После создания репозитория необходимо заполнить форму: https://docs.google.com/forms/d/1ZS4k_GpbsJhoBidHuHiGZyHclfJP_KKjP_sbgb8G3yw

 
Основные шаги выполнения

Подготовка окружения

1. Установить Node.js и npm
2. Создать новый проект и инициализировать package.json:
 
3. Установить основные зависимости:
a.	Express для создания сервера
b.	Sequelize для работы с базой данных
c.	pg и pg-hstore для взаимодействия с PostgreSQL
 
4. Установить nodemon для автоматического перезапуска сервера в режиме разработки:
 
5. Добавить в package.json скрипт для запуска сервера в режиме разработки:
 

  
Настройка сервера
1. Создание файла для запуска сервера
1.1 В корне проекта создать файл index.js.
1.2 Открыть его в редакторе кода и импортировать необходимые модули:
●	Express для работы с сервером.
●	Dotenv для загрузки конфигурации из .env файла.
●	CORS для разрешения запросов с других доменов.

2. Подключить Express и настроить базовый сервер
2.1 Создать объект приложения app.
2.2 Настроить middleware:
○	express.json() для обработки входящих JSON-запросов.
○	cors() для разрешения кросс-доменных запросов.
2.3 Определить порт, на котором будет работать сервер (из .env (см. следующий шаг) или значение по умолчанию).
2.4 Добавить тестовый маршрут (GET /), который возвращает простой JSON-ответ.

3. Запуск сервера
3.1 Настроить прослушивание сервера на указанном порту.
3.2 Добавить обработку ошибок при запуске (например, если порт занят).
3.3 Проверить, что сервер запускается без ошибок.

4. Проверка работы сервера
4.1 Открыть терминал и запустить сервер командой:
 
4.2 Открыть браузер и перейти по адресу: http://localhost:[Ваш порт]/. Должен отобразиться тестовый JSON-ответ.
4.3 Альтернативно, можно проверить работу сервера с помощью Postman или cURL: 
 

 
Настройка базы данных
1. Подготовка базы данных
1.1 Установить и запустить PostgreSQL.
1.2 Создать базу данных для проекта. Например, через psql:
 
2. Создание конфига
2.1 Создать файл .env  в корне проекта и добавить в него параметры подключения:
 
Внимание! Никогда не храните реальные пароли в репозитории. Используйте .gitignore для исключения .env из индекса!
3. Подключение к БД
3.1 Создать файл db.js в папке config и настроить подключение:
3.2 Импортировать Sequelize.
3.3 Загрузить переменные из .env.
3.4 Создать объект sequelize с параметрами подключения.
3.5 Добавить функцию authenticate() для проверки соединения.
3.6 Экспортировать объект для использования в моделях.

4. Проверка подключения к базе данных
4.1 Добавить в index.js тестовую проверку подключения.
●	Импортировать sequelize из db.js.
●	Вызвать sequelize.authenticate(), чтобы убедиться, что соединение установлено.
●	Вывести сообщение в консоль при успешном подключении.
4.2 Запустить сервер и проверить что все работает:

 
Создание модели данных "Мероприятие"
1. Определить структуру модели с полями:
○	id (уникальный идентификатор)
○	title (название мероприятия)
○	description (описание)
○	date (дата проведения)
○	createdBy(id пользователя создавшего мероприятие, внешний ключ)
2. Добавить валидацию (например, поле title обязательно).
3. Синхронизировать модель с базой данных.
Создание модели данных "Пользователь"
1. Определить структуру модели с полями:
○	id (уникальный идентификатор)
○	name (имя пользователя)
○	email (email пользователя)
○	createdAt (дата регистрации)
2. Проверить, что email является уникальным.
3. Синхронизировать модель с базой данных.

Важно! Необходимо настроить связь между таблицами пользователей и мероприятий (один ко многим).
 
Реализация API для работы с мероприятиями
1. Создание маршрутов
●	Получение списка всех мероприятий (GET /events)
●	Получение одного мероприятия по ID (GET /events/:id)
●	Создание мероприятия (POST /events)
●	Обновление мероприятия (PUT /events/:id)
●	Удаление мероприятия (DELETE /events/:id)
2. Основные требования
●	Проверять, переданы ли обязательные данные.
●	Возвращать корректные HTTP-статусы в случае ошибок (200, 400, 404).
●	Обрабатывать возможные ошибки при работе с базой данных.
●	Протестировать API с помощью Postman или cURL.
 
Реализация API для работы с пользователями
1. Создание маршрутов
●	Создание нового пользователя (POST /users)
●	Получение списка пользователей (GET /users)
2. Основные требования
●	При создании проверять уникальность email.
●	Реализовать корректные сообщения об ошибках.
●	Протестировать API с помощью Postman.

 
Задания по вариантам
Функциональные (Будут задействованы в дальнейшем)
1. Добавление поля "Локация" для мероприятия
●	Добавить в модель Event поле location (строка).
●	Обновить API, чтобы можно было передавать и получать location.
●	Добавить валидацию: поле не может быть пустым.
2. Добавление категории мероприятия
●	Добавить в модель Event поле category (например, "концерт", "лекция", "выставка").
●	Реализовать возможность фильтрации мероприятий по категории.
●	Ограничить возможные категории с помощью ENUM.
3. Фильтрация мероприятий по дате
●	Изменить GET /events, чтобы можно было передавать параметры startDate и endDate.
●	Реализовать фильтрацию мероприятий по переданному диапазону дат.
●	Проверить работу через Postman.
4. Добавление поиска мероприятий
●	Добавить в API GET /events?search=слово поиск мероприятий по названию и описанию.
●	Использовать оператор ILIKE (для PostgreSQL) для поиска без учета регистра.
●	Проверить, что работает корректно.
5. Ограничение количества мероприятий на странице (пагинация)
●	Добавить параметры page и limit в GET /events.
●	Реализовать постраничную загрузку данных.
●	Проверить работу с разными значениями page и limit.
6. Добавить soft delete (мягкое удаление) для пользователей и мероприятий
●	Добавить поле deletedAt в модели.
●	При удалении (DELETE /users/:id) не удалять, а ставить deletedAt = NOW().
●	Фильтровать при запросах (where: { deletedAt: null }).
7. Добавить возможность загружать изображение для мероприятия и хранить ссылку в БД
●	Добавить поле image_url в таблицу Events
●	Реализовать загрузку изображений с помощью Multer (или другого middleware) и сохранение на сервере.
●	Ограничить максимальный размер файла (например, 2MB) и разрешенные форматы (.jpg, .png).
●	POST /events/:id/image — загрузить изображение для мероприятия.
●	GET /events/:id — получать мероприятие с изображением.

Документация
1. Подключение Swagger-документации
●	Установить swagger-jsdoc и swagger-ui-express.
●	Добавить документацию для всех API (/events, /users).
●	Запустить сервер и проверить документацию по http://localhost:5000/api-docs.

Логирование
1. Логирование запросов в API
●	Установить morgan или создать кастомный middleware для логирования.
●	Логировать запросы в консоли с указанием метода и пути ([GET] /events).
●	Проверить, что все запросы логируются корректно.

Улучшения (Механизмы безопасности, ограничения и обработка ошибок в API)
1. Ограничение количество создаваемых пользователем мероприятий в день
●	Добавить обработку проверяющую сколько событий создал пользователь за последние 24 часа.
●	Хранить константу - количество возможных запросов в день в .env файле.
●	Отклонять запросы превышающие лимит, отдавать корректное сообщение об ошибке.
2. Ограничение доступа к API с помощью API-ключа
●	Добавить middleware, который проверяет наличие API_KEY в заголовке запроса.
●	Хранить API-ключ в .env файле.
●	Отклонять запросы без корректного API-ключа.
3. Улучшение обработки ошибок
●	Сделать централизованный обработчик ошибок.
●	Добавить кастомные ошибки (ValidationError, NotFoundError).
●	Изменить API так, чтобы при ошибке возвращались осмысленные сообщения.
4. Добавить поддержку rate limiting для API (например, не более 100 запросов в минуту)
5. Введение CORS-ограничений
●	Настроить CORS для работы только с доверенными доменами.
●	Разрешить GET и POST, но ограничить DELETE и PUT для внешних клиентов.
●	Добавить возможность настройки CORS в .env.


Варианты

Вариант	Функциональное	Улучшения
1	1	1
2	2	2
3	3	3
4	4	4
5	5	5
6	6	1
7	7	2
8	1	3
9	2	4
10	3	5
11	4	1
12	5	2
13	6	3
14	7	4
15	1	5
16	2	1
17	3	2
18	4	3
19	5	4
20	6	5
21	7	1
22	1	2
23	2	3
24	3	4
25	4	5
26	5	1
27	6	2


 
Контрольные вопросы
Общие вопросы по теме:
1.	Что такое Node.js и почему он используется для разработки серверных приложений?
2.	Какие основные функции выполняет Express.js?
3.	Что такое ORM и зачем использовать Sequelize для работы с базой данных?
Настройка проекта и зависимостей:
1.	Какие npm-пакеты необходимы для работы с PostgreSQL в Node.js?
2.	Для чего используется файл .env и как с ним работать?
3.	Какую команду нужно выполнить, чтобы установить все зависимости, указанные в package.json?
4.	Как работает nodemon и зачем он нужен в процессе разработки?
Работа с базой данных PostgreSQL:
1.	Как создать базу данных в PostgreSQL через консоль?
2.	Какая команда позволяет создать нового пользователя в PostgreSQL?
3.	В чем разница между командами CREATE DATABASE и CREATE TABLE?
4.	Как проверить список всех существующих баз данных в PostgreSQL?
5.	Как подключиться к созданной базе данных через psql?
Использование Sequelize ORM:
1.	Какие основные методы есть у Sequelize для работы с таблицами (CRUD-операции)?
2.	Как выполнить подключение к PostgreSQL в Sequelize?
3.	В чем разница между методами sync() и migrate() в Sequelize?
4.	Как создать новую модель в Sequelize и связать ее с другой таблицей?
5.	Как настроить отношения "один ко многим" между таблицами User и Event?
Разработка API:
1.	Как создать базовый сервер на Express.js?
2.	Какие middleware используются в Express и для чего?
3.	Какой метод в Express отвечает за обработку POST-запросов?
4.	Как передавать данные в POST-запросах и как их обрабатывать в Express?
5.	Как протестировать API с помощью Postman или curl?
6.	Как вернуть JSON-ответ с сервера Express?

